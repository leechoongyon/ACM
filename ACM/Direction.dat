-------- 알고리즘 푸는 순서 -------- 

1. Listen
	- Detail 한 것을 파악해라
	
2. Example
	- 예시는 크게 크게 만들어라
	- 특별한 케이스를 찾아라.
	
3. Brute-force
	- 속도가 안나와도 된다. 최적화를 하면 된다.
	
4. Optimize
	- 3번에서 작성한 것에 대해 최적화해라 (이 구간에 시간을 투자해라)
	
5. Walk through your algorithm
	- 알고리즘을 검토하고 검증하라
	
6. Code Start

7. Test
	- 코드를 봐라. 알고리즘을 보지말고.
	- 어떻게 동작하는지 코드만 집중
	
	
-------- 최적화 --------
* B U D

1. B (Bottleneck) : brute-force 하는데 속도를 느리게 하는 것을 제거하라.

ex) A : 1,5,12 ...
	B : 1,3,5,6,57 ...
	
	A 와 B 의 공통을 찾기
	
	brute-force 로 접근하면 A를 가지고 B를 비교할테니 O(A*B) 이다.
	--> 이 병목을 줄이기 위해 B 를 HashSet 에 집어넣은 뒤, A를 HashSet 에 집어넣는다.
	    에러가 나는 것이 공통 넘버다.
	    시간 복잡도는 O(B) + O(A)
	    
	    
2. U (Unnecessary work) : 불필요한 작업은 하지 않는다.

ex) a의3승 + b의 3승 = c의 3승 + d의 3승
    조건 : 0 < a,b,c,d < 1000
     for a 1~1000
     	for b 1~1000
     		for c 1~1000
     			for d 1~1000
     
    시간복잡도는 O(n의4승) 이지만 조건이 있어 굳이 다 할필요 없다. 불필요한 작업은 하지마라.
    
3. D (Duplicated Work) : 반복작업을 줄여라
	- 메모리를 사용해 시간복잡도를 낮출 수 있다.
	- ex) a의 3승 + b의 3승 = c의 3승 + d의 3승 이면 c,d 의 결과 값을 하나의 메모리에 담아놓고 계산해도 됨.
	

	

	